''
asfasf''
;
)
")"
print("hello work")
priprint.DLLinfo()
priprint.DLLInfo()
print.DLLInfo()
x<=print.DLLInfo()
var x<=print.DLLInfo()
print.DLLInfo(x)
x = 1
print.DLLInfo(x)
for i in range(0,1)
for i in range(0,1):
for (i in [1,2,3]) {print(i)}
}
for (i in [1,2,3]) {print(i)}
for (i in c(1,2,3)) {print(i)}
help(c)
c(1,7:9)
vector(length = 10)
vector(length = 10,TRUE)
vector(length = 10,mode = "TRUE")
vector(length = 10,mode = TRUE)
vector(mode="logical",length = 10)
gbinom = function(n, p, low=0, high=n,scale = F, a=NA,b=NA,calcProb=!all(is.na(c(a,b))),quantile=NA,calcQuant=!is.na(quantile))
{
sd = sqrt(n * p * (1 - p))
if(scale && (n > 10)) {
low = max(0, round(n * p - 4 * sd))
high = min(n, round(n * p + 4 * sd))
}
values = low:high
probs = dbinom(values, n, p)
plot(c(low,high), c(0,max(probs)), type = "n", xlab = "Possible Values",
ylab = "Probability",
main = paste("Binomial Distribution \n", "n =", n, ", p =", p))
lines(values, probs, type = "h", col = 2)
abline(h=0,col=3)
if(calcProb) {
if(is.na(a))
a = 0
if(is.na(b))
b = n
if(a > b) {
d = a
a = b
b = d
}
a = round(a)
b = round(b)
prob = pbinom(b,n,p) - pbinom(a-1,n,p)
title(paste("P(",a," <= Y <= ",b,") = ",round(prob,6),sep=""),line=0,col.main=4)
u = seq(max(c(a,low)),min(c(b,high)),by=1)
v = dbinom(u,n,p)
lines(u,v,type="h",col=4)
}
else if(calcQuant==T) {
if(quantile < 0 || quantile > 1)
stop("quantile must be between 0 and 1")
x = qbinom(quantile,n,p)
title(paste("The ",quantile," quantile = ",x,sep=""),line=0,col.main=4)
u = 0:x
v = dbinom(u,n,p)
lines(u,v,type="h",col=4)
}
return(invisible())
}
gbinom = function(n, p, low=0, high=n,scale = F, a=NA,b=NA,calcProb=!all(is.na(c(a,b))),quantile=NA,calcQuant=!is.na(quantile))
{
sd = sqrt(n * p * (1 - p))
if(scale && (n > 10)) {
low = max(0, round(n * p - 4 * sd))
high = min(n, round(n * p + 4 * sd))
}
values = low:high
probs = dbinom(values, n, p)
plot(c(low,high), c(0,max(probs)), type = "n", xlab = "Possible Values",
ylab = "Probability",
main = paste("Binomial Distribution \n", "n =", n, ", p =", p))
lines(values, probs, type = "h", col = 2)
abline(h=0,col=3)
if(calcProb) {
if(is.na(a))
a = 0
if(is.na(b))
b = n
if(a > b) {
d = a
a = b
b = d
}
a = round(a)
b = round(b)
prob = pbinom(b,n,p) - pbinom(a-1,n,p)
title(paste("P(",a," <= Y <= ",b,") = ",round(prob,6),sep=""),line=0,col.main=4)
u = seq(max(c(a,low)),min(c(b,high)),by=1)
v = dbinom(u,n,p)
lines(u,v,type="h",col=4)
}
else if(calcQuant==T) {
if(quantile < 0 || quantile > 1)
stop("quantile must be between 0 and 1")
x = qbinom(quantile,n,p)
title(paste("The ",quantile," quantile = ",x,sep=""),line=0,col.main=4)
u = 0:x
v = dbinom(u,n,p)
lines(u,v,type="h",col=4)
}
return(invisible())
}
gbinom()
gbinom(2)
gbinom(1,2)
gbinom(100,2)
gbinom(100,200)
gbinom(100,1)
gbinom(100,100000)
vector(mode="logical",length = 10
)
vector(mode="logical",length = 10,TRUE)
vector(mode="logical",length = 10,value = TRUE)
vector(mode="logical")
yo <- function(x,y) {
}
yo()
yo()
NULL==0
logical(1)
logical(0)
logical(-1)
logical(22)
NULL == 0
NULL=1
0==NULL
1==NULL
NULL.is.empty
is.null(NULL)
type(NULL)
typeof(NULL)
typeof(1)
typeof(1.2)
typeof(a)
typeof('a')
#### Company: ACME ####
# Project: testing R
# First Name: Aubhik
# Second Name: Mazumdar
# Id
# Date
# WHAT DOES THIS PROGRAM DO?? ####
# Check the outline....ctrl + shift + O
x<-25
print x
x
sup
x
print(hello)
# Second Name: Mazumdar
# Id
# Date
# WHAT DOES THIS PROGRAM DO?? ####
# Check the outline....ctrl + shift + O
x<-25
x
hello <- "started from the bottom"
print(hello)
"now we here"
c
print(c)
clear
clear()
close(clear)
close(clear)
v
v<-c(1,2,5,4,2)
v
min(v)
mean(v)
v<-c(1,2,5,4,2)
v
min(v)
max(v)
mean(v)
v <- c(1,2,5,4,2)
v
min(v)
max(v)
mean(v)
x<-
x<- (1,2,2,NA,5,10)
x<- (1,2,2,NA,5,10)
x<- c(1,2,2,NA,5,10)
min(x)
max(x)
mean(x)
help(min)
min(x,na.rm = FALSE)
min(x,na.rm = TRUE)
length(hello)
x3<-seq(from=10.2,to=26.5,by=2.1)
mode(x3)
typeof(x3)
x6<-1:6
typeof(x6)
x7<-as.integer(x3)
typeof(x7)
x8<-(x7,hello)
x8<-c(x7,hello)
typeof(x8)
x8<-c(x7,'hello')
typeof(x8)
objects<-ls()
rm(list=ls())
rm(list=ls()) ####comments in R
firstname<-"aubhik"
lastname<-"mazumdar"
firstlast<-c(firstname,lastname)
firstlast
addfi
addfi<-firstname+lastname
addfi
clear
?factor()
cat <- c('good','bad','bad','good','good','bad')
typeof(cat)
cat2<-factor(cat)
cat2
cat <- c('good','bad','bad','good','good','bad','hello')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good
cat <- c('good','bad','bad','good','good','bad')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good
typeof(cat2)
typeof(cat)
typeof(cat2)
cat <- c('good',' bad','bad','good','good','bad')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good, in alphabetical order
cat <- c('good','bad','bad','good','good','bad')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good, in alphabetical order
typeof(cat2) #integer
cat3<-factor(cat,levels=c('good','bad'))
cat3
days_factor<-factor(days)
days<-c('Monday','Tuesday','Sunday','Wednesday','Thursday')
days_factor<-factor(days)
days_factor
days_factor<-factor(days,levels=c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
days_factor
days<-c('Monday','Tuesday','Saturday','Friday','Sunday','Wednesday')
days_factor<-factor(days,levels=c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
days_factor
as_int<-as.integer(days_factor)
as_int
as_num<-as.number(days_factor)
mx1<-matrix(x,nrow=3,ncol=3,byrow=FALSE)
x<-1:9
mx1<-matrix(x,nrow=3,ncol=3,byrow=FALSE)
mode(mx1)
typeof(mx1)
mx1
mx1<-matrix(x,nrow=3,ncol=3,byrow=TRUE)
mode(mx1)
typeof(mx1)
mx1
x<-1:9
mx1<-matrix(x,nrow=3,ncol=3,byrow=TRUE)
mode(mx1)
typeof(mx1)
mx1
my_lst <- list(c('yo','yo'),233421,c(22,22.4,44,23.31))
my_lst
length(my_lst)
mode(my_lst)=typeof(my_lst)
bo<-mode(my_lst)=typeof(my_lst)
bo <- mode(my_lst)=typeof(my_lst)
my_lst <- list(c('yo','yo'),233421,list(2,3,4),c(22,22.4,44,23.31))
my_lst
length(my_lst) # 3
mode(my_lst)=typeof(my_lst)
TRUE<-mode(my_lst)=typeof(my_lst)
mode(my_lst)=typeof(my_lst)
mode(my_lst)==typeof(my_lst)
mode(my_lst)
mode(my_lst)==typeof(x)
mode(my_lst)=typeof(x)
mode(my_lst)==typeof(my_lst)
mode(my_lst)
mylst2<-list(seq=1:10,my_lst)
mylst2
mylst2<-list(seq<-1:10,my_lst)
mylst2
is.list(mylst2[4])
is.list(mylst2[1]) #anything grabbed from the list is also a list
is.list(mylst2[[1]]) #anything grabbed from the list is also a list
is.list(mylst2[[1]])
is.list(mylst2[1]) #anything grabbed from the list is also a list
mylst2[[1]][2]
mylst2[1][[2]]
mylst2[1][[1]]
is.list(mydf)
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14))#similar to a list but all the components have the same length
is.list(mydf)
is.data.frame(mydf)
is.matrix(mydf)
typeof(mydf)
length(mydf)
nlist<-list(site=c('A','B'),p=c(7.3,6.0,2,14))
nlist==mydf
View(mydf)
View(mydf) #Shows it as a table
View(mydf) #Shows it as a table
View(nlist)
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14,22))#similar to a list but all the components have the same length
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14,22,22))#similar to a list but all the components have the same length
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14,22))#length(mydf[2])/length(mydf[1]) should be an integer
data()
View(iris)
typeof(iris)
length(iris)
nrow(iris)
View(iris)
vec<-c('A','B','C','D')
names(vec)<-c('first','second','third','fourth')
vec['first']
vec<-c('A','B','C','D')
names(vec)
subset1<-iris[c(4,1,3,22),-5]
subset2<-iris[1:20,]
subset3<-iris[c(T,T,F,F),c(2,3,4)]
subset3
subset3<-iris[c(T,F,F,F),c(2,3,4)]
subset3
subset3
subset3<-iris[c(T,F,F,F,F),c(2,3,4)] #just the 1,5,9
subset3
train<-iris(nrow(iris),as.integer(.70*nrow(iris)))
?sample
train<-sample(nrow(iris),as.integer(.70*nrow(iris)))
nrow(train)
View(train)
idx<-sample(nrow(iris),as.integer(.70*nrow(iris)))#create an index for selecting the rows randomly
idx
train<-iris(idx,)
train<-iris[idx,]
train
test<-iris[-idx,]
test
train,test<-iris[idx,],iris[-idx,] #creates a training data
train<-iris[idx,] #creates a training data
train
test<-iris[-idx,]
test
train<-iris[idx,] #creates a training data
train
test<-iris[-idx,]
test
mmnorm <-function(x,minx,maxx)
{
z<-((x-minx)/(maxx-minx))
return(z)
}
mmnorm2 <-function(x)
{
z<-((x-min(x))/(max(x)-min(x)))
return(z)
}
myvector<-1:20
mmnorm2(myvector)
myvector<-1:20
mmnorm(myvector,1,200)
myvector<-1:20
mmnorm2(myvector)
mmnorm4 <-function(x)
{
minx<-0
z<-((x-minx)/(maxx-minx))
y<-list(z,minx,maxx)
return(y)
}
results<-mmnorm2(myvector)
maxx<-20
minx<-1
mmnorm4 <-function(x)
{
minx<-0
z<-((x-minx)/(maxx-minx))
y<-list(z,minx,maxx)
return(y)
}
results<-mmnorm4(myvector)
f_print <-function(x1,x2,x3,x4,x5)
{
print(c('value of x1',x1))
print(c('value of x2',x2))
print(c('value of x3',x3))
print(c('value of x4',x4))
print(c('value of x5',x5))
}
f_print(10,5,3,2,1)
f_print(x2=10,x5=5,3,2,1)
list
list packages
install.packages("kknn")
install.packages("kknn")
data(iris)
view(iris)
View(iris)
index <- seq(1,nrow(iris),by=5)
test <- iris[index,]
training <- iris[-index,]
training
?kknn
??kknn
library(help = kknn)
predict_k5 <- kknn(formula=Species~.,training,test,k=5,kernel = "rectangular")
library(kknn)
index <- seq(1,nrow(iris),by=5)
test <- iris[index,]
training <- iris[-index,]
predict_k5 <- kknn(formula=Species~.,training,test,k=5,kernel = "rectangular")
#library(help = kknn)
fit <- fitted(predict_k5)
table(predict_k5$Species,fit)
table(test$Species,fit)
predict_k5 <- kknn(formula=Species~.,training,test,k=5,distance = 1,kernel = "triangular")
#library(help = kknn)
fit <- fitted(predict_k5)
table(test$Species,fit)
#library(help = kknn)
fit <- fitted(predict_k5)
table(test$Species,fit)
pcol <- as.character(as.numeric(test$Species))
pairs(test[1:4], pch = pcol, col = c("green3", "red")
[(test$Species != fit)+1])
rm(list =ls())
# Importing the CSV file
breast_cancer<-read.csv("/Users/aubhikmazumdar/Desktop/Stevens/Fall_2018/KDD/hw2/breast-cancer-wisconsin.data.csv",na.string="?")
View(breast_cancer)
# Question 1.1
# Summarizing each column (e.g. min, max, mean )
summary(breast_cancer)
# Question 1.2
# Identifying Missing values
View(breast_cancer)
is.na(breast_cancer) # The missing values that are denoted by NA are represented as TRUE
# Question 1.3
# Replacing the missing values with the "mode" (most frequent value) of the column
library(modeest)
mfv = mlv(breast_cancer$F6, method = 'mfv', na.rm = TRUE) # identifying the mode
str(mfv)
mfv$M
breast_cancer[is.na(breast_cancer$F6),"F6"]<-mfv$M
# Question 1.4
# Displaying the frequency table of "Class" vs. F6
table(Class = breast_cancer$Class,F6 = breast_cancer$F6)
# Question 1.5
# Displaying the scatter plot of F1 to F6, one pair at a time
plot(breast_cancer[,2:7])
# Question 1.6
# Show histogram box plot for columns F7 to F9
hist(breast_cancer$F7)
hist(breast_cancer$F8)
hist(breast_cancer$F9)
boxplot(breast_cancer[8:10])
############################     EXTRA #########################
install.packages(modeest)
############################     EXTRA #########################
install.packages(modest)
############################     EXTRA #########################
install.packages("modeest"")
############################     EXTRA #########################
install.packages("modeest")
############################     EXTRA #########################
install.packages("modeest")
library(modeest)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
install.packages(rpart.plot,rattle,RColorBrewer)
install.packages(rpart.plot,rattle)
install.packages(rpart.plot)
install.packages("rattle")
install.packages('rpart.plot','rattle','RColorBrewer')
install.packages('rattle')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
install.packages('c50')
install.packages('C50')
?c5.0
?C5.0
install.packages("C50")
?C5.0
??C5.0
install.packages("neuralnet")
setwd('/Users/aubhikmazumdar/Desktop/Fall_2018/KDD/CS513-Project/datasets/olympic-games')
data <- read.csv('summer.csv')
levels(data$Discipline)

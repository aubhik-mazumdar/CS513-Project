cat2
cat <- c('good','bad','bad','good','good','bad','hello')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good
cat <- c('good','bad','bad','good','good','bad')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good
typeof(cat2)
typeof(cat)
typeof(cat2)
cat <- c('good',' bad','bad','good','good','bad')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good, in alphabetical order
cat <- c('good','bad','bad','good','good','bad')
typeof(cat) #character
cat2<-factor(cat) #convert to categorical variable- 1 and 2
cat2 # Levels: bad good, in alphabetical order
typeof(cat2) #integer
cat3<-factor(cat,levels=c('good','bad'))
cat3
days_factor<-factor(days)
days<-c('Monday','Tuesday','Sunday','Wednesday','Thursday')
days_factor<-factor(days)
days_factor
days_factor<-factor(days,levels=c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
days_factor
days<-c('Monday','Tuesday','Saturday','Friday','Sunday','Wednesday')
days_factor<-factor(days,levels=c('Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))
days_factor
as_int<-as.integer(days_factor)
as_int
as_num<-as.number(days_factor)
mx1<-matrix(x,nrow=3,ncol=3,byrow=FALSE)
x<-1:9
mx1<-matrix(x,nrow=3,ncol=3,byrow=FALSE)
mode(mx1)
typeof(mx1)
mx1
mx1<-matrix(x,nrow=3,ncol=3,byrow=TRUE)
mode(mx1)
typeof(mx1)
mx1
x<-1:9
mx1<-matrix(x,nrow=3,ncol=3,byrow=TRUE)
mode(mx1)
typeof(mx1)
mx1
my_lst <- list(c('yo','yo'),233421,c(22,22.4,44,23.31))
my_lst
length(my_lst)
mode(my_lst)=typeof(my_lst)
bo<-mode(my_lst)=typeof(my_lst)
bo <- mode(my_lst)=typeof(my_lst)
my_lst <- list(c('yo','yo'),233421,list(2,3,4),c(22,22.4,44,23.31))
my_lst
length(my_lst) # 3
mode(my_lst)=typeof(my_lst)
TRUE<-mode(my_lst)=typeof(my_lst)
mode(my_lst)=typeof(my_lst)
mode(my_lst)==typeof(my_lst)
mode(my_lst)
mode(my_lst)==typeof(x)
mode(my_lst)=typeof(x)
mode(my_lst)==typeof(my_lst)
mode(my_lst)
mylst2<-list(seq=1:10,my_lst)
mylst2
mylst2<-list(seq<-1:10,my_lst)
mylst2
is.list(mylst2[4])
is.list(mylst2[1]) #anything grabbed from the list is also a list
is.list(mylst2[[1]]) #anything grabbed from the list is also a list
is.list(mylst2[[1]])
is.list(mylst2[1]) #anything grabbed from the list is also a list
mylst2[[1]][2]
mylst2[1][[2]]
mylst2[1][[1]]
is.list(mydf)
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14))#similar to a list but all the components have the same length
is.list(mydf)
is.data.frame(mydf)
is.matrix(mydf)
typeof(mydf)
length(mydf)
nlist<-list(site=c('A','B'),p=c(7.3,6.0,2,14))
nlist==mydf
View(mydf)
View(mydf) #Shows it as a table
View(mydf) #Shows it as a table
View(nlist)
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14,22))#similar to a list but all the components have the same length
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14,22,22))#similar to a list but all the components have the same length
mydf<-data.frame(site=c('A','B'),p=c(7.3,6.0,2,14,22))#length(mydf[2])/length(mydf[1]) should be an integer
data()
View(iris)
typeof(iris)
length(iris)
nrow(iris)
View(iris)
vec<-c('A','B','C','D')
names(vec)<-c('first','second','third','fourth')
vec['first']
vec<-c('A','B','C','D')
names(vec)
subset1<-iris[c(4,1,3,22),-5]
subset2<-iris[1:20,]
subset3<-iris[c(T,T,F,F),c(2,3,4)]
subset3
subset3<-iris[c(T,F,F,F),c(2,3,4)]
subset3
subset3
subset3<-iris[c(T,F,F,F,F),c(2,3,4)] #just the 1,5,9
subset3
train<-iris(nrow(iris),as.integer(.70*nrow(iris)))
?sample
train<-sample(nrow(iris),as.integer(.70*nrow(iris)))
nrow(train)
View(train)
idx<-sample(nrow(iris),as.integer(.70*nrow(iris)))#create an index for selecting the rows randomly
idx
train<-iris(idx,)
train<-iris[idx,]
train
test<-iris[-idx,]
test
train,test<-iris[idx,],iris[-idx,] #creates a training data
train<-iris[idx,] #creates a training data
train
test<-iris[-idx,]
test
train<-iris[idx,] #creates a training data
train
test<-iris[-idx,]
test
mmnorm <-function(x,minx,maxx)
{
z<-((x-minx)/(maxx-minx))
return(z)
}
mmnorm2 <-function(x)
{
z<-((x-min(x))/(max(x)-min(x)))
return(z)
}
myvector<-1:20
mmnorm2(myvector)
myvector<-1:20
mmnorm(myvector,1,200)
myvector<-1:20
mmnorm2(myvector)
mmnorm4 <-function(x)
{
minx<-0
z<-((x-minx)/(maxx-minx))
y<-list(z,minx,maxx)
return(y)
}
results<-mmnorm2(myvector)
maxx<-20
minx<-1
mmnorm4 <-function(x)
{
minx<-0
z<-((x-minx)/(maxx-minx))
y<-list(z,minx,maxx)
return(y)
}
results<-mmnorm4(myvector)
f_print <-function(x1,x2,x3,x4,x5)
{
print(c('value of x1',x1))
print(c('value of x2',x2))
print(c('value of x3',x3))
print(c('value of x4',x4))
print(c('value of x5',x5))
}
f_print(10,5,3,2,1)
f_print(x2=10,x5=5,3,2,1)
list
list packages
install.packages("kknn")
install.packages("kknn")
data(iris)
view(iris)
View(iris)
index <- seq(1,nrow(iris),by=5)
test <- iris[index,]
training <- iris[-index,]
training
?kknn
??kknn
library(help = kknn)
predict_k5 <- kknn(formula=Species~.,training,test,k=5,kernel = "rectangular")
library(kknn)
index <- seq(1,nrow(iris),by=5)
test <- iris[index,]
training <- iris[-index,]
predict_k5 <- kknn(formula=Species~.,training,test,k=5,kernel = "rectangular")
#library(help = kknn)
fit <- fitted(predict_k5)
table(predict_k5$Species,fit)
table(test$Species,fit)
predict_k5 <- kknn(formula=Species~.,training,test,k=5,distance = 1,kernel = "triangular")
#library(help = kknn)
fit <- fitted(predict_k5)
table(test$Species,fit)
#library(help = kknn)
fit <- fitted(predict_k5)
table(test$Species,fit)
pcol <- as.character(as.numeric(test$Species))
pairs(test[1:4], pch = pcol, col = c("green3", "red")
[(test$Species != fit)+1])
rm(list =ls())
# Importing the CSV file
breast_cancer<-read.csv("/Users/aubhikmazumdar/Desktop/Stevens/Fall_2018/KDD/hw2/breast-cancer-wisconsin.data.csv",na.string="?")
View(breast_cancer)
# Question 1.1
# Summarizing each column (e.g. min, max, mean )
summary(breast_cancer)
# Question 1.2
# Identifying Missing values
View(breast_cancer)
is.na(breast_cancer) # The missing values that are denoted by NA are represented as TRUE
# Question 1.3
# Replacing the missing values with the "mode" (most frequent value) of the column
library(modeest)
mfv = mlv(breast_cancer$F6, method = 'mfv', na.rm = TRUE) # identifying the mode
str(mfv)
mfv$M
breast_cancer[is.na(breast_cancer$F6),"F6"]<-mfv$M
# Question 1.4
# Displaying the frequency table of "Class" vs. F6
table(Class = breast_cancer$Class,F6 = breast_cancer$F6)
# Question 1.5
# Displaying the scatter plot of F1 to F6, one pair at a time
plot(breast_cancer[,2:7])
# Question 1.6
# Show histogram box plot for columns F7 to F9
hist(breast_cancer$F7)
hist(breast_cancer$F8)
hist(breast_cancer$F9)
boxplot(breast_cancer[8:10])
############################     EXTRA #########################
install.packages(modeest)
############################     EXTRA #########################
install.packages(modest)
############################     EXTRA #########################
install.packages("modeest"")
############################     EXTRA #########################
install.packages("modeest")
############################     EXTRA #########################
install.packages("modeest")
library(modeest)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
install.packages(rpart.plot,rattle,RColorBrewer)
install.packages(rpart.plot,rattle)
install.packages(rpart.plot)
install.packages("rattle")
install.packages('rpart.plot','rattle','RColorBrewer')
install.packages('rattle')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
install.packages('c50')
install.packages('C50')
?c5.0
?C5.0
install.packages("C50")
?C5.0
??C5.0
install.packages("neuralnet")
rm(list = ls())
setwd('/Users/aubhikmazumdar/Desktop/Stevens/Fall_2018/KDD/')
setwd("/Users/aubhikmazumdar/Desktop/Stevens/Fall_2018/KDD/hw2")
# Read in the data_set, treat all '?' as NA values
# and specify that column Class is a factor (categorical variable)
data_set <- read.csv("breast-cancer-wisconsin.data.csv",na.strings = "?",
header = TRUE,colClasses = c(Class="factor"))
data_set
setwd("~/Users/aubhikmazumdar/Desktop/Stevens/Fall_2018/KDD/hw2")
getwd()
setwd("Desktop/Stevens/Fall_2018/KDD/hw2")
setwd("/Desktop/Stevens/Fall_2018/KDD/hw2")
rm(list = ls())
setwd('/Users/aubhikmazumdar/Desktop/Stevens/Fall_2018/KDD/')
install.packages(ggmap)
install.packages('ggmap)
install.packages('ggmap')
install.packages('ggmap')
map1 <- get_map()
library(ggmap)
map1 <- get_map()
library(ggmap)
map1 <- get_map()
qmap("Delhi")
install.packages('OpenStreetMap')
library(OpenStreetMap)
library(rgdal)
map <- openmap(c(70,-179), c(-70,179))
library(rgdal)
library(OpenStreetMap)
install.packages('OpenStreetMap')
library(OpenStreetMap)
install.packages("OpenStreetMap")
library(rgdal)
library(OpenStreetMap)
outpath <- file.choose()
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
# Remove the column for Vehicle.Size
data <- data[,-10]
which(is.na(data))
data <- na.omit(data)
data$Make <- factor(data$Make)
data$Make
set.seed(100)
idx <- sample(c(1:nrow(data)),0.75*nrow(data))
train <- data[idx,]
test <- data[-idx,]
#average_price_by_fuel_type
library(caroline)
average_price_by_fuel_type <- groupBy(data,by='Engine.Fuel.Type',clmns='MSRP',aggregation = 'mean',na.rm = TRUE,full.names = TRUE)
l <- data.frame(levels(data$Engine.Fuel.Type))
t <- data.frame(l,average_price_by_fuel_type)
t
View(t)
levels(data$Engine.Fuel.Type)
?colnames
colnames(t) <- c("Engine type","Average Price")
colnames(t) <- c("Engine type","Average Price")
View(t)
View(t)
hist(t$`Engine type`,t$`Average Price`)
hist(t$`Average Price`)
hist(t$`Average Price`)
hist(t)
hist(t[,2])
t
summary(t)
rm(list = ls())
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
# Remove the column for Vehicle.Size
data <- data[,-10]
which(is.na(data))
rm(list = ls())
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
# Remove the column for Vehicle.Size
data <- data[,-10]
data <- na.omit(data)
data$Make <- factor(data$Make)
data$Make
set.seed(100)
idx <- sample(c(1:nrow(data)),0.75*nrow(data))
train <- data[idx,]
test <- data[-idx,]
#average_price_by_fuel_type
library(caroline)
l <- data.frame(levels(data$Engine.Fuel.Type))
# Calculating the average price for each car type
average_price_by_fuel_type <- groupBy(data,by='Engine.Fuel.Type',clmns='MSRP',
aggregation = 'mean',na.rm = TRUE,full.names = TRUE)
View(average_price_by_fuel_type)
View(l)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),Average.Price = average_price_by_fuel_type)
View(average_price_engine)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),AveragePrice = average_price_by_fuel_type)
View(average_price_by_fuel_type)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),AveragePrice = average_price_by_fuel_type(,1))
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),AveragePrice = average_price_by_fuel_type(,))
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),AveragePrice = c(average_price_by_fuel_type)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),average_price_by_fuel_type)
#average_price_by_fuel_type
library(caroline)
# Calculating the average price for each car type
average_price_by_fuel_type <- groupBy(data,by='Engine.Fuel.Type',clmns='MSRP',
aggregation = 'mean',na.rm = TRUE,full.names = TRUE)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),average_price_by_fuel_type)
View(average_price_engine)
View(average_price_engine)
View(average_price_engine)
class(average_price_by_fuel_type)
average_price_by_fuel_type$c.18632.3333333333..40729.0980392157..34511.9230769231..48641.9230769231..
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),price=average_price_by_fuel_type$c.18632.3333333333..40729.0980392157..34511.9230769231..48641.9230769231..)
View(average_price_engine)
View(average_price_engine)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),average_price=average_price_by_fuel_type$c.18632.3333333333..40729.0980392157..34511.9230769231..48641.9230769231..)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),
average_price=average_price_by_fuel_type[,1])
View(average_price_engine)
View(average_price_engine)
# Create the table for average price
average_price_engine <- data.frame(Engine.Type = levels(data$Engine.Fuel.Type),
average_price=average_price_by_fuel_type[,1])
View(average_price_engine)
View(average_price_engine)
clusters <- kmeans(data[,c(5,6,9,12,13,14,15)],47,iter.max = 100)
clusters <- kmeans(data[,c(5,6,9,12,13,14,15)],47,iter.max = 100)
data$MakeCluster <- as.factor(clusters$cluster)
str(clusters)
clusters <- kmeans(data[,c()],47,iter.max = 100)
clusters <- kmeans(data[,c()],47,iter.max = 100)
clusters <- kmeans(data[,c(5,6,9,12,13,14,15)],47,iter.max = 100)
data$MakeCluster <- as.factor(clusters$cluster)
str(clusters)
clusters <- kmeans(data[,c()],47,iter.max = 100)
# Average price for each cluster
library(caroline)
g <- groupBy(data,by='MakeCluster',aggregation = c('mean'),clmns='MSRP',na.rm=TRUE, full.names = TRUE)
g
View(g)
# Calculating the average price for each car type
average_price_by_make <- groupBy(data,by='Make',clmns='MSRP',
aggregation = 'mean',na.rm = TRUE,full.names = TRUE)
# Create the table for average price
average_price_make <- data.frame(Make = levels(data$Make),
average_price=average_price_by_make[,1])
View(average_price_by_make)
View(average_price_by_make)
View(average_price_make)
# Average price for each cluster
library(caroline)
g <- groupBy(data,by='MakeCluster',aggregation = c('mean'),clmns='MSRP',na.rm=TRUE, full.names = TRUE)
View(g)
rm(list = ls())
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
# Remove the column for Vehicle.Size
data <- data[,-10]
which(is.na(data))
data <- na.omit(data)
rm(list = ls())
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
rm(list = ls())
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
# Remove the column for Vehicle.Size
data <- data[,-10]
data <- na.omit(data)
data$Make <- factor(data$Make)
data$Make
set.seed(100)
idx <- sample(c(1:nrow(data)),0.75*nrow(data))
train <- data[idx,]
test <- data[-idx,]
library(kknn)
model <- kknn(Make ~.,train,test,k=7)
fit <- fitted(model)
#ref <- predict(model,test)
t <- table(actual = test$Make,fit)
View(t)
wrong <- (test$Make != fit)
rate <- sum(wrong)/length(wrong)
rate
#Got 96% accuracy in predicting the make!
accuracy <- 1 - rate
accuracy
ref <- predict(model,test)
rm(list = ls())
setwd('~/Desktop/Fall_2018/KDD/CS513-Project/datasets')
data = read.csv('data.csv',na.strings = 'N/A')
# Remove the column for Market.Category
# Remove the column for Market.Category
data <- data[,c(-10,]
# Remove the column for Market.Category
data <- data[,c(-10,-11)]
data <- na.omit(data)
data$Make <- factor(data$Make)
set.seed(100)
idx <- sample(c(1:nrow(data)),0.75*nrow(data))
train <- data[idx,]
test <- data[-idx,]
library(kknn)
model <- kknn(Make ~.,train,test,k=7)
fit <- fitted(model)
wrong <- (test$Make != fit)
rate <- sum(wrong)/length(wrong)
rate
#Got 96% accuracy in predicting the make!
accuracy <- 1 - rate
accuracy
model <- kknn(Make ~.,train,test,k=5)
fit <- fitted(model)
t <- table(actual = test$Make,fit)
View(t)
wrong <- (test$Make != fit)
rate <- sum(wrong)/length(wrong)
rate
#Got 96% accuracy in predicting the make!
accuracy <- 1 - rate
accuracy
